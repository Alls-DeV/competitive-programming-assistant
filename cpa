#!/usr/bin/python3
import sys
import os

import cpa_constants
import cpa_setup
import cpa_parse
import cpa_submit
import cpa_debug

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("Unknown command, use cpa -h or cpa --help for help")
    elif sys.argv[1] == "--help" or sys.argv[1] == "-h":
        print("Usage: cpa parse | submit | debug | comparator | validate")
        print("Usage: cpa p | s | d | c | v")
        print("Use -h or --help with any of the above commands to get more info")
    elif sys.argv[1] == "setup":
        if len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help"):
            print("Usage: cpa setup contest_name problem_name1 problem_name2 ...")
            print("Creates a folder with the name of the contest and creates a file for each problem in the list")
        elif len(sys.argv) < 4:
            print("Usage: cpa setup [contest_name] [problem_name1] [problem_name2] ...")
            print("Creates a folder with the name of the contest and creates a file for each problem in the list")
        else:
            cpa_setup.setup(sys.argv[2], sys.argv[3:])
    elif sys.argv[1] == "parse" or sys.argv[1] == "p":
        if len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help"):
            print("Usage: cpa parse or cpa p")
            print("Parses problem or contest from the following websites:")
            print("Codeforces, CodeChef, Kattis and Google Competitions")
        else:
            x = cpa_parse.Parser()
            if not x.parse():
                print(f"{cpa_constants.colors.RED}Failed to parse{cpa_constants.colors.NC}")
    elif sys.argv[1] == "submit" or sys.argv[1] == "s":
        if len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help"):
            print("Usage: cpa submit problem_name or cpa s problem_name")
            print("Submit a problem on codeforces")
            print("If problem_name is not specified, it will submit the name of the directory you are using this command in (with the .cpp extension)")
        else:
            contest_path = os.getcwd()[:os.getcwd().rfind('/')]
            if len(sys.argv) > 2:
                problem_name = sys.argv[2]
            else:
                problem_name = os.getcwd()[os.getcwd().rfind('/') + 1:] + ".cpp"
            languages = ("cpp", "cc", "cxx", "c++", "c", "py", "java", "rs")
            if not problem_name.endswith(languages):
                print(f"{cpa_constants.colors.RED}Invalid file extension, please use one of the following: {languages}{cpa_constants.colors.NC}")
            else:
                x = cpa_submit.Submitter(contest_path, problem_name)
                x.submit()
    elif sys.argv[1] == "debug" or sys.argv[1] == "d":
        if (len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help")) or len(sys.argv) > 5:
            print("Usage: cpa debug problem_name or cpa d problem_name")
            print("Compiles and runs the code on all the test cases, highlighting the differences\n")
            print("Usage: cpa d problem_name [N | -k | -D]")
            print("If a number is specified, it will run only on the N-th test case")
            print("If -k is specified you will enter the test case input manually")
            print("If -D is specified you will compile the code with the -D flag")
            print("You can combine N or -k with -D")
        else:
            problem_name = sys.argv[2]
            if problem_name.isdigit():
                print("Unknown command")
                print("Usage: cpa debug problem_name or cpa d problem_name")
                print("Compiles and runs the code on all the test cases, highlighting the differences\n")
                print("Usage: cpa d problem_name [N | -k | -D]")
                print("If a number is specified, it will run only on the N-th test case")
                print("If -k is specified you will enter the test case input manually")
                print("If -D is specified you will compile the code with the -D flag")
                print("You can combine N or -k with -D")
                exit()
            if len(sys.argv[3:]) == 0:
                cpa_debug.debug(problem_name)
            elif len(sys.argv[3:]) == 1:
                if sys.argv[3].isdigit():
                    cpa_debug.debug(problem_name, testcase = int(sys.argv[3]))
                elif sys.argv[3] == "-k":
                    cpa_debug.debug(problem_name, k = True)
                elif sys.argv[3] == "-D":
                    cpa_debug.debug(problem_name, DEBUG = True)
                else:
                    print("Unknown command")
                    print("Usage: cpa debug problem_name or cpa d problem_name")
                    print("Compiles and runs the code on all the test cases, highlighting the differences\n")
                    print("Usage: cpa d problem_name [N | -k | -D]")
                    print("If a number is specified, it will run only on the N-th test case")
                    print("If -k is specified you will enter the test case input manually")
                    print("If -D is specified you will compile the code with the -D flag")
                    print("You can combine N or -k with -D")
                    exit()
            elif len(sys.argv[3:]) == 2:
                s = set(sys.argv[3:])
                if "-k" in s and "-D" in s:
                    cpa_debug.debug(problem_name, k = True, DEBUG = True)
                elif "-D" in s:
                    cpa_debug.debug(problem_name, testcase = [int(x) for x in s if x.isdigit()][0], DEBUG = True)
                else:
                    print("Unknown command")
                    print("Usage: cpa debug problem_name or cpa d problem_name")
                    print("Compiles and runs the code on all the test cases, highlighting the differences\n")
                    print("Usage: cpa d problem_name [N | -k | -D]")
                    print("If a number is specified, it will run only on the N-th test case")
                    print("If -k is specified you will enter the test case input manually")
                    print("If -D is specified you will compile the code with the -D flag")
                    print("You can combine N or -k with -D")
                    exit()
    elif sys.argv[1] == "comparator" or sys.argv[1] == "c":
        if len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help"):
            print("Usage: cpa comparator solution1 solution2 generator numTests")
            print("solution1, solution2 and generator are respectively the executables of the two solutions and of the testcases generator")
            print("Compares the outputs of two solutions of a problem, checking if they give the same outputs")
            print("Remove cin >> testcase")
        elif len(sys.argv) != 6:
            print(f"{cpa_constants.colors.RED}Invalid number of arguments, use cpa comparator -h for help{cpa_constants.colors.NC}")
        else:
            os.system("cpa_comparator " + " ".join(sys.argv[2:]))
    elif sys.argv[1] == "validate" or sys.argv[1] == "v":
        if len(sys.argv) > 2 and (sys.argv[2] == "-h" or sys.argv[2] == "--help"):
            print("Usage: cpa validate solution validator generator numTests")
            print("solution, validator and generator are respectively the executables of the solution, validator of a solution and of the testcases generator")
            print("validator should return the string 'OK' or the string that explains the error")
            print("validator first take in input the generator input and next the program output")
            print("Remove cin >> testcase")
        elif len(sys.argv) != 6:
            print(f"{cpa_constants.colors.RED}Invalid number of arguments, use cpa validate -h for help{cpa_constants.colors.NC}")
        else:
            os.system("cpa_validate " + " ".join(sys.argv[2:]))
    else:
        print("Unknown command")
        print("Usage: cpa parse | submit | debug | comparator | validate")
        print("Usage: cpa p | s | d | c | v")
        print("Use -h or --help with any of the above commands to get more info")